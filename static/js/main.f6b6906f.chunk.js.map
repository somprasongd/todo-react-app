{"version":3,"sources":["components/Title.jsx","components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","components/Clock.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","_ref","count","react_default","a","createElement","TodoForm","textInput","onAdd","onSubmit","e","preventDefault","value","className","htmlFor","type","ref","node","id","placeholder","Todo","props","todo","onToggle","onDelete","style","textDecoration","isCompleted","onClick","text","TodoList","todos","Fragment","length","map","components_Todo","key","Clock","state","date","Date","_this2","this","console","log","timerID","setInterval","tick","prevProps","prevState","clearInterval","setState","toLocaleTimeString","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAdd","axios","post","apiUrl","then","res","toConsumableArray","push","data","handleRemove","remainder","filter","delete","concat","handleToggleComplete","find","put","isShowTime","get","reduce","c","_this3","_this$state","countUncompleted","components_Title","components_TodoForm","components_TodoList","components_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6b6906f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Title({ count }) {\r\n  return (\r\n    <div>\r\n      <h1>Todo ({count})</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\nfunction TodoForm({ onAdd }) {\r\n  // Input tracker\r\n  let textInput;\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onAdd(textInput.value);\r\n    // Clear input value\r\n    textInput.value = '';\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-row align-items-center\">\r\n        <div className=\"col\">\r\n          <label className=\"sr-only\" htmlFor=\"inlineFormInput\">\r\n            Task\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            ref={node => (textInput = node)}\r\n            className=\"form-control mb-2\"\r\n            id=\"inlineFormInput\"\r\n            placeholder=\"What needs to be done?\"\r\n          />\r\n        </div>\r\n        <div className=\"col-auto\">\r\n          <button type=\"submit\" className=\"btn btn-primary mb-2\">\r\n            <i className=\"fas fa-plus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\n\r\nfunction Todo(props) {\r\n  const { todo, onToggle, onDelete } = props;\r\n  return (\r\n    <li className=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\">\r\n      <div\r\n        style={{\r\n          textDecoration: todo.isCompleted ? 'line-through' : null\r\n        }}\r\n        onClick={e => onToggle(todo.id)}\r\n      >\r\n        {todo.text}\r\n      </div>\r\n      <button className=\"btn btn-danger\" onClick={e => onDelete(todo.id)}>\r\n        <i className=\"fas fa-minus-circle\" />\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList(props) {\r\n  const { todos, onToggle, onDelete } = props;\r\n  return (\r\n    <>\r\n      {todos.length === 0 ? (\r\n        <p className=\"text-center\">No task.</p>\r\n      ) : (\r\n        <ul className=\"list-group\">\r\n          {todos.map(todo => (\r\n            <Todo\r\n              key={todo.id}\r\n              todo={todo}\r\n              onToggle={onToggle}\r\n              onDelete={onDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\n\r\nclass Clock extends Component {\r\n  state = { date: new Date() };\r\n\r\n  componentDidMount() {\r\n    console.log('componentDidMount');\r\n\r\n    this.timerID = setInterval(() => this.tick(), 1000);\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('componentWillUnmount');\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    console.log('tick');\r\n\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log('render');\r\n    return (\r\n      <div>\r\n        <h2>Time is {this.state.date.toLocaleTimeString()}.</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Title from './components/Title';\r\nimport TodoForm from './components/TodoForm';\r\nimport TodoList from './components/TodoList';\r\nimport Clock from './components/Clock';\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    // Set initial state\r\n    this.state = { todos: [], isShowTime: false };\r\n    this.apiUrl = 'https://5d1ac8b7dd81710014e87e54.mockapi.io/api/todos';\r\n  }\r\n\r\n  // Lifecycle method\r\n  componentDidMount() {\r\n    // Make HTTP reques with Axios\r\n    axios.get(this.apiUrl).then(res => {\r\n      // Set state with result\r\n      this.setState({ todos: res.data });\r\n    });\r\n  }\r\n\r\n  count(todos) {\r\n    return todos.reduce((a, c) => a + (c.isCompleted ? 0 : 1), 0);\r\n  }\r\n\r\n  // Add todo handler\r\n  handleAdd = text => {\r\n    if (text.length === 0) return;\r\n\r\n    // Assemble data\r\n    const todo = {\r\n      text,\r\n      isCompleted: false\r\n    };\r\n\r\n    // Update state\r\n    axios.post(this.apiUrl, todo).then(res => {\r\n      // Clone & Update data\r\n      const todos = [...this.state.todos];\r\n      todos.push(res.data);\r\n\r\n      this.setState({ todos });\r\n    });\r\n  };\r\n\r\n  // Handle remove\r\n  handleRemove = id => {\r\n    // Filter all todos except the one to be removed\r\n    const remainder = this.state.todos.filter(todo => todo.id !== id);\r\n    // Update state with filter\r\n    axios.delete(`${this.apiUrl}/${id}`).then(res => {\r\n      this.setState({ todos: remainder });\r\n    });\r\n  };\r\n\r\n  // Handle toggle complete\r\n  handleToggleComplete = id => {\r\n    // Clone\r\n    const todos = [...this.state.todos];\r\n\r\n    const todo = todos.find(todo => todo.id === id);\r\n\r\n    todo.isCompleted = !todo.isCompleted;\r\n\r\n    // Update data\r\n    axios.put(`${this.apiUrl}/${id}`, todo).then(res => {\r\n      this.setState({ todos });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { todos, isShowTime } = this.state;\r\n    const countUncompleted = this.count(todos);\r\n    return (\r\n      <div className=\"container mt-5\">\r\n        <Title count={countUncompleted} />\r\n        <TodoForm onAdd={this.handleAdd} />\r\n        <TodoList\r\n          todos={todos}\r\n          onToggle={this.handleToggleComplete}\r\n          onDelete={this.handleRemove}\r\n        />\r\n        <div className=\"m-2\">\r\n          {isShowTime && <Clock />}\r\n          <button\r\n            className=\"btn btn-info\"\r\n            onClick={e => this.setState({ isShowTime: !isShowTime })}\r\n          >\r\n            {isShowTime ? 'Hide' : 'Show'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}